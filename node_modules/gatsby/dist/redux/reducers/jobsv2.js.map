{"version":3,"sources":["../../../src/redux/reducers/jobsv2.ts"],"names":["initialState","incomplete","Map","complete","jobsV2Reducer","state","action","type","cacheIsCorrupt","job","payload","set","contentDigest","jobContentDigest","result","get","Error","delete","inputPaths"],"mappings":";;;;;AAOA,MAAMA,YAAY,GAAG,MAA8B;AACjD,SAAO;AACLC,IAAAA,UAAU,EAAE,IAAIC,GAAJ,EADP;AAELC,IAAAA,QAAQ,EAAE,IAAID,GAAJ;AAFL,GAAP;AAID,CALD;;AAOO,MAAME,aAAa,GAAG,CAC3BC,KAAK,GAAGL,YAAY,EADO,EAE3BM,MAF2B,KAGA;AAC3B,UAAQA,MAAM,CAACC,IAAf;AACE,SAAM,cAAN;AACE,aAAOD,MAAM,CAACE,cAAP,GAAwBR,YAAY,EAApC,GAAyCK,KAAhD;;AAEF,SAAM,eAAN;AAAsB;AACpB,cAAM;AAAEI,UAAAA;AAAF,YAAUH,MAAM,CAACI,OAAvB;AAEAL,QAAAA,KAAK,CAACJ,UAAN,CAAiBU,GAAjB,CAAqBF,GAAG,CAACG,aAAzB,EAAwC;AACtCH,UAAAA;AADsC,SAAxC;AAIA,eAAOJ,KAAP;AACD;;AAED,SAAM,YAAN;AAAmB;AACjB,cAAM;AAAEQ,UAAAA,gBAAF;AAAoBC,UAAAA;AAApB,YAA+BR,MAAM,CAACI,OAA5C;AACA,cAAM;AAAED,UAAAA;AAAF,YAAUJ,KAAK,CAACJ,UAAN,CAAiBc,GAAjB,CACdF,gBADc,CAAhB;;AAIA,YAAI,CAACJ,GAAL,EAAU;AACR,gBAAM,IAAIO,KAAJ,CACH,2GADG,CAAN;AAGD;;AAEDX,QAAAA,KAAK,CAACJ,UAAN,CAAiBgB,MAAjB,CAAwBR,GAAG,CAACG,aAA5B,EAZiB,CAcjB;;AACAP,QAAAA,KAAK,CAACF,QAAN,CAAeQ,GAAf,CAAmBF,GAAG,CAACG,aAAvB,EAAsC;AACpCE,UAAAA,MADoC;AAEpCI,UAAAA,UAAU,EAAET,GAAG,CAACS;AAFoB,SAAtC;AAKA,eAAOb,KAAP;AACD;;AAED,SAAM,qBAAN;AAA4B;AAC1B,cAAM;AAAEO,UAAAA;AAAF,YAAoBN,MAAM,CAACI,OAAjC;AACAL,QAAAA,KAAK,CAACJ,UAAN,CAAiBgB,MAAjB,CAAwBL,aAAxB;AACAP,QAAAA,KAAK,CAACF,QAAN,CAAec,MAAf,CAAsBL,aAAtB;AAEA,eAAOP,KAAP;AACD;AA3CH;;AA8CA,SAAOA,KAAP;AACD,CAnDM","sourcesContent":["import {\n  ActionsUnion,\n  IGatsbyState,\n  IGatsbyIncompleteJobV2,\n  IGatsbyCompleteJobV2,\n} from \"../types\"\n\nconst initialState = (): IGatsbyState[\"jobsV2\"] => {\n  return {\n    incomplete: new Map(),\n    complete: new Map(),\n  }\n}\n\nexport const jobsV2Reducer = (\n  state = initialState(),\n  action: ActionsUnion\n): IGatsbyState[\"jobsV2\"] => {\n  switch (action.type) {\n    case `DELETE_CACHE`:\n      return action.cacheIsCorrupt ? initialState() : state\n\n    case `CREATE_JOB_V2`: {\n      const { job } = action.payload\n\n      state.incomplete.set(job.contentDigest, {\n        job,\n      } as IGatsbyIncompleteJobV2)\n\n      return state\n    }\n\n    case `END_JOB_V2`: {\n      const { jobContentDigest, result } = action.payload\n      const { job } = state.incomplete.get(\n        jobContentDigest\n      ) as IGatsbyIncompleteJobV2\n\n      if (!job) {\n        throw new Error(\n          `If you encounter this error, it's probably a Gatsby internal bug. Please open an issue reporting us this.`\n        )\n      }\n\n      state.incomplete.delete(job.contentDigest)\n\n      // inputPaths is used to make sure the job is not stale\n      state.complete.set(job.contentDigest, {\n        result,\n        inputPaths: job.inputPaths,\n      } as IGatsbyCompleteJobV2)\n\n      return state\n    }\n\n    case `REMOVE_STALE_JOB_V2`: {\n      const { contentDigest } = action.payload\n      state.incomplete.delete(contentDigest)\n      state.complete.delete(contentDigest)\n\n      return state\n    }\n  }\n\n  return state\n}\n"],"file":"jobsv2.js"}