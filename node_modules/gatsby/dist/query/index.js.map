{"version":3,"sources":["../../src/query/index.ts"],"names":["process","env","GATSBY_EXPERIMENTAL_QUERY_CONCURRENCY","console","info","concurrency","Number","calcDirtyQueryIds","state","trackedQueries","trackedComponents","deletedQueries","queries","queriesWithBabelErrors","Set","component","values","errors","FLAG_ERROR_EXTRACTION","queryId","pages","add","dirtyQueryIds","query","has","dirty","push","groupQueryIds","queryIds","grouped","_","groupBy","p","slice","store","getState","staticQueryIds","static","pageQueryIds","page","map","path","get","filter","Boolean","createQueue","createJobFn","activity","graphqlRunner","graphqlTracing","GraphQLRunner","worker","cb","job","undefined","span","then","result","tick","catch","error","processQueries","onQueryDone","Promise","resolve","reject","fastQueue","forEach","err","res","kill","idle","drain","createStaticQueryJob","staticQueryComponents","hash","id","componentPath","isPage","context","onDevelopStaticQueryDone","websocketManager","emitStaticQueryData","processStaticQueries","NODE_ENV","processPageQueries","createPageQueryJob","components"],"mappings":"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","sourcesContent":["import _ from \"lodash\"\nimport fastq from \"fastq\"\nimport { IProgressReporter } from \"gatsby-cli/lib/reporter/reporter-progress\"\nimport { store } from \"../redux\"\nimport { IGatsbyPage, IGatsbyState } from \"../redux/types\"\nimport { hasFlag, FLAG_ERROR_EXTRACTION } from \"../redux/reducers/queries\"\nimport { IQueryJob, queryRunner } from \"./query-runner\"\nimport {\n  IStaticQueryResult,\n  websocketManager,\n} from \"../utils/websocket-manager\"\nimport { GraphQLRunner } from \"./graphql-runner\"\nimport { IGroupedQueryIds } from \"../services\"\n\nif (process.env.GATSBY_EXPERIMENTAL_QUERY_CONCURRENCY) {\n  console.info(\n    `GATSBY_EXPERIMENTAL_QUERY_CONCURRENCY: Running with concurrency set to \\`${process.env.GATSBY_EXPERIMENTAL_QUERY_CONCURRENCY}\\``\n  )\n}\n\nconst concurrency =\n  Number(process.env.GATSBY_EXPERIMENTAL_QUERY_CONCURRENCY) || 4\n\n/**\n * Calculates the set of dirty query IDs (page.paths, or staticQuery.id's).\n *\n * Dirty state is tracked in `queries` reducer, here we simply filter\n * them from all tracked queries.\n */\nexport function calcDirtyQueryIds(state: IGatsbyState): Array<string> {\n  const { trackedQueries, trackedComponents, deletedQueries } = state.queries\n\n  const queriesWithBabelErrors = new Set()\n  for (const component of trackedComponents.values()) {\n    if (hasFlag(component.errors, FLAG_ERROR_EXTRACTION)) {\n      for (const queryId of component.pages) {\n        queriesWithBabelErrors.add(queryId)\n      }\n    }\n  }\n  // Note: trackedQueries contains both - page and static query ids\n  const dirtyQueryIds: Array<string> = []\n  for (const [queryId, query] of trackedQueries) {\n    if (deletedQueries.has(queryId)) {\n      continue\n    }\n    if (query.dirty > 0 && !queriesWithBabelErrors.has(queryId)) {\n      dirtyQueryIds.push(queryId)\n    }\n  }\n  return dirtyQueryIds\n}\n\nexport { calcDirtyQueryIds as calcInitialDirtyQueryIds }\n\n/**\n * Groups queryIds by whether they are static or page queries.\n */\nexport function groupQueryIds(queryIds: Array<string>): IGroupedQueryIds {\n  const grouped = _.groupBy(queryIds, p =>\n    p.slice(0, 4) === `sq--` ? `static` : `page`\n  )\n\n  const { pages } = store.getState()\n\n  return {\n    staticQueryIds: grouped?.static || [],\n    pageQueryIds:\n      grouped?.page\n        ?.map(path => pages.get(path) as IGatsbyPage)\n        ?.filter(Boolean) || [],\n  }\n}\n\nfunction createQueue<QueryIDType>({\n  createJobFn,\n  state,\n  activity,\n  graphqlRunner,\n  graphqlTracing,\n}: {\n  createJobFn: (\n    state: IGatsbyState,\n    queryId: QueryIDType\n  ) => IQueryJob | undefined\n  state: IGatsbyState\n  activity: IProgressReporter\n  graphqlRunner: GraphQLRunner\n  graphqlTracing: boolean\n}): fastq.queue<QueryIDType, any> {\n  if (!graphqlRunner) {\n    graphqlRunner = new GraphQLRunner(store, { graphqlTracing })\n  }\n  state = state || store.getState()\n\n  function worker(queryId: QueryIDType, cb): void {\n    const job = createJobFn(state, queryId)\n    if (!job) {\n      cb(null, undefined)\n      return\n    }\n    queryRunner(graphqlRunner, job, activity?.span)\n      .then(result => {\n        if (activity.tick) {\n          activity.tick()\n        }\n        cb(null, { job, result })\n      })\n      .catch(error => {\n        cb(error)\n      })\n  }\n  // Note: fastq.promise version is much slower\n  return fastq(worker, concurrency)\n}\n\nasync function processQueries<QueryIDType>({\n  queryIds,\n  createJobFn,\n  onQueryDone,\n  state,\n  activity,\n  graphqlRunner,\n  graphqlTracing,\n}: {\n  queryIds: Array<QueryIDType>\n  createJobFn: (\n    state: IGatsbyState,\n    queryId: QueryIDType\n  ) => IQueryJob | undefined\n  onQueryDone:\n    | (({ job, result }: { job: IQueryJob; result: unknown }) => void)\n    | undefined\n  state: IGatsbyState\n  activity: IProgressReporter\n  graphqlRunner: GraphQLRunner\n  graphqlTracing: boolean\n}): Promise<void> {\n  return new Promise((resolve, reject) => {\n    const fastQueue = createQueue({\n      createJobFn,\n      state,\n      activity,\n      graphqlRunner,\n      graphqlTracing,\n    })\n\n    queryIds.forEach((queryId: QueryIDType) => {\n      fastQueue.push(queryId, (err, res) => {\n        if (err) {\n          fastQueue.kill()\n          reject(err)\n          return\n        }\n        if (res && onQueryDone) {\n          onQueryDone(res)\n        }\n      })\n    })\n\n    if (!fastQueue.idle()) {\n      fastQueue.drain = (): any => resolve()\n    } else {\n      resolve()\n    }\n  })\n}\n\nfunction createStaticQueryJob(\n  state: IGatsbyState,\n  queryId: string\n): IQueryJob | undefined {\n  const component = state.staticQueryComponents.get(queryId)\n\n  if (!component) {\n    return undefined\n  }\n\n  const { hash, id, query, componentPath } = component\n\n  return {\n    id: queryId,\n    query,\n    isPage: false,\n    hash,\n    componentPath,\n    context: { path: id },\n  }\n}\n\nfunction onDevelopStaticQueryDone({\n  job,\n  result,\n}: {\n  job: IQueryJob\n  result: IStaticQueryResult[\"result\"]\n}): void {\n  if (!job.hash) {\n    return\n  }\n\n  websocketManager.emitStaticQueryData({\n    result,\n    id: job.hash,\n  })\n}\n\nexport async function processStaticQueries(\n  queryIds: IGroupedQueryIds[\"staticQueryIds\"],\n  { state, activity, graphqlRunner, graphqlTracing }\n): Promise<void> {\n  return processQueries<string>({\n    queryIds,\n    createJobFn: createStaticQueryJob,\n    onQueryDone:\n      process.env.NODE_ENV === `production`\n        ? undefined\n        : onDevelopStaticQueryDone,\n    state,\n    activity,\n    graphqlRunner,\n    graphqlTracing,\n  })\n}\n\nexport async function processPageQueries(\n  queryIds: IGroupedQueryIds[\"pageQueryIds\"],\n  { state, activity, graphqlRunner, graphqlTracing }\n): Promise<void> {\n  return processQueries<IGatsbyPage>({\n    queryIds,\n    createJobFn: createPageQueryJob,\n    onQueryDone: undefined,\n    state,\n    activity,\n    graphqlRunner,\n    graphqlTracing,\n  })\n}\n\nfunction createPageQueryJob(\n  state: IGatsbyState,\n  page: IGatsbyPage\n): IQueryJob | undefined {\n  const component = state.components.get(page.componentPath)\n\n  if (!component) {\n    return undefined\n  }\n\n  const { path, componentPath, context } = page\n  const { query } = component\n\n  return {\n    id: path,\n    query,\n    isPage: true,\n    componentPath,\n    context: {\n      ...page,\n      ...context,\n    },\n  }\n}\n"],"file":"index.js"}