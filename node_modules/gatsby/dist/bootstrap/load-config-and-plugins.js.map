{"version":3,"sources":["../../src/bootstrap/load-config-and-plugins.ts"],"names":["loadConfigAndPlugins","siteDirectory","processFlags","configModule","configFilePath","config","reporter","panic","id","context","configName","enabledConfigFlags","unknownFlagMessage","message","availableFlags","flags","warn","forEach","flag","process","env","info","telemetryId","telemetry","trackFeatureIsUsed","plugins","rootDir","store","dispatch","internalActions","setSiteConfig","flattenedPlugins"],"mappings":";;;;;;;AAAA;;AACA;;AAIA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEO,eAAeA,oBAAf,CAAoC;AACzCC,EAAAA,aADyC;AAEzCC,EAAAA,YAAY,GAAG;AAF0B,CAApC,EASJ;AACD;AACA,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAAmC,MAAM,kCAC7CH,aAD6C,EAE5C,eAF4C,CAA/C;AAIA,MAAII,MAAM,GAAG,kCAAcF,YAAd,CAAb,CANC,CAQD;;AACA,MAAI,OAAOE,MAAP,KAAmB,UAAvB,EAAkC;AAChCC,sBAASC,KAAT,CAAe;AACbC,MAAAA,EAAE,EAAG,OADQ;AAEbC,MAAAA,OAAO,EAAE;AACPC,QAAAA,UAAU,EAAG,eADN;AAEPT,QAAAA;AAFO;AAFI,KAAf;AAOD;;AAED,MAAII,MAAM,IAAIH,YAAd,EAA4B;AAC1B;AACA,QAAIG,MAAJ,EAAY;AACV;AACA,YAAM;AAAEM,QAAAA,kBAAF;AAAsBC,QAAAA,kBAAtB;AAA0CC,QAAAA;AAA1C,UAAsD,0BAC1DC,cAD0D,EAE1DT,MAAM,CAACU,KAFmD,CAA5D;;AAKA,UAAIH,kBAAkB,KAAM,EAA5B,EAA+B;AAC7BN,0BAASU,IAAT,CAAcJ,kBAAd;AACD,OATS,CAWV;;;AACAD,MAAAA,kBAAkB,CAACM,OAAnB,CAA2BC,IAAI,IAAI;AACjCC,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACE,GAAjB,IAAyB,MAAzB;AACD,OAFD,EAZU,CAgBV;;AACA,UAAIP,OAAO,KAAM,EAAjB,EAAoB;AAClBP,0BAASe,IAAT,CAAcR,OAAd;AACD,OAnBS,CAqBV;;;AACAF,MAAAA,kBAAkB,CAACM,OAAnB,CAA2BC,IAAI,IAAI;AACjC,YAAIA,IAAI,CAACI,WAAT,EAAsB;AACpBC,mCAAUC,kBAAV,CAA6BN,IAAI,CAACI,WAAlC;AACD;AACF,OAJD,EAtBU,CA4BV;;AACA,UAAIjB,MAAM,CAACU,KAAX,EAAkB;AAChBQ,iCAAUC,kBAAV,CAA8B,aAA9B;AACD;AACF;AACF,GAtDA,CAwDD;;;AACA,MAAInB,MAAJ,EAAY;AACV,UAAMoB,OAAO,GAAG,MAAM,yBAAWpB,MAAX,EAAmB;AACvCD,MAAAA,cADuC;AAEvCsB,MAAAA,OAAO,EAAEzB;AAF8B,KAAnB,CAAtB;AAIAI,IAAAA,MAAM,GAAGoB,OAAO,CAACpB,MAAjB;AACD;;AAEDsB,eAAMC,QAAN,CAAeC,yBAAgBC,aAAhB,CAA8BzB,MAA9B,CAAf;;AAEA,QAAM0B,gBAAgB,GAAG,MAAM,8BAAY1B,MAAZ,EAAoBJ,aAApB,CAA/B;AAEA,SAAO;AAAEI,IAAAA,MAAF;AAAU0B,IAAAA;AAAV,GAAP;AACD","sourcesContent":["import reporter from \"gatsby-cli/lib/reporter\"\nimport telemetry from \"gatsby-telemetry\"\n\nimport { IFlattenedPlugin } from \"./load-plugins/types\"\n\nimport { preferDefault } from \"../bootstrap/prefer-default\"\nimport { getConfigFile } from \"../bootstrap/get-config-file\"\nimport { loadPlugins } from \"../bootstrap/load-plugins\"\nimport { internalActions } from \"../redux/actions\"\nimport loadThemes from \"../bootstrap/load-themes\"\nimport { store } from \"../redux\"\nimport handleFlags from \"../utils/handle-flags\"\nimport availableFlags from \"../utils/flags\"\n\nexport async function loadConfigAndPlugins({\n  siteDirectory,\n  processFlags = false,\n}: {\n  siteDirectory: string\n  processFlags?: boolean\n}): Promise<{\n  config: any\n  flattenedPlugins: Array<IFlattenedPlugin>\n}> {\n  // Try opening the site's gatsby-config.js file.\n  const { configModule, configFilePath } = await getConfigFile(\n    siteDirectory,\n    `gatsby-config`\n  )\n  let config = preferDefault(configModule)\n\n  // The root config cannot be exported as a function, only theme configs\n  if (typeof config === `function`) {\n    reporter.panic({\n      id: `10126`,\n      context: {\n        configName: `gatsby-config`,\n        siteDirectory,\n      },\n    })\n  }\n\n  if (config && processFlags) {\n    // Setup flags\n    if (config) {\n      // Get flags\n      const { enabledConfigFlags, unknownFlagMessage, message } = handleFlags(\n        availableFlags,\n        config.flags\n      )\n\n      if (unknownFlagMessage !== ``) {\n        reporter.warn(unknownFlagMessage)\n      }\n\n      //  set process.env for each flag\n      enabledConfigFlags.forEach(flag => {\n        process.env[flag.env] = `true`\n      })\n\n      // Print out message.\n      if (message !== ``) {\n        reporter.info(message)\n      }\n\n      //  track usage of feature\n      enabledConfigFlags.forEach(flag => {\n        if (flag.telemetryId) {\n          telemetry.trackFeatureIsUsed(flag.telemetryId)\n        }\n      })\n\n      // Track the usage of config.flags\n      if (config.flags) {\n        telemetry.trackFeatureIsUsed(`ConfigFlags`)\n      }\n    }\n  }\n\n  // theme gatsby configs can be functions or objects\n  if (config) {\n    const plugins = await loadThemes(config, {\n      configFilePath,\n      rootDir: siteDirectory,\n    })\n    config = plugins.config\n  }\n\n  store.dispatch(internalActions.setSiteConfig(config))\n\n  const flattenedPlugins = await loadPlugins(config, siteDirectory)\n\n  return { config, flattenedPlugins }\n}\n"],"file":"load-config-and-plugins.js"}