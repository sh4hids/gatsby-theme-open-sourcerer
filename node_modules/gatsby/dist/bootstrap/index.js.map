{"version":3,"sources":["../../src/bootstrap/index.ts"],"names":["tracer","bootstrap","initialContext","spanArgs","parentSpan","childOf","startSpan","bootstrapContext","shouldRunCreatePagesStatefully","context","gatsbyNodeGraphQLFunction","store","reporter","process","env","GATSBY_EXPERIMENTAL_PARALLEL_QUERY_RUNNING","finish","workerPool"],"mappings":";;;;;;;AAAA;;AACA;;AAYA;;AACA;;AACA;;AAEA;;AACA;;AAEA,MAAMA,MAAM,GAAG,gCAAf;;AAEO,eAAeC,SAAf,CACLC,cADK,EAKJ;AACD,QAAMC,QAAQ,GAAGD,cAAc,CAACE,UAAf,GACb;AAAEC,IAAAA,OAAO,EAAEH,cAAc,CAACE;AAA1B,GADa,GAEb,EAFJ;AAIA,QAAMA,UAAU,GAAGJ,MAAM,CAACM,SAAP,CAAkB,WAAlB,EAA8BH,QAA9B,CAAnB;AAEA,QAAMI,gBAEL,GAAG,EACF,GAAGL,cADD;AAEFE,IAAAA,UAFE;AAGFI,IAAAA,8BAA8B,EAAE;AAH9B,GAFJ;AAQA,QAAMC,OAAO,GAAG,EACd,GAAGF,gBADW;AAEd,QAAI,MAAM,0BAAWA,gBAAX,CAAV;AAFc,GAAhB;AAKA,QAAM,+BAAgBE,OAAhB,CAAN;AACA,QAAM,2BAAYA,OAAZ,CAAN;AAEA,QAAM,2BAAYA,OAAZ,CAAN;AAEAA,EAAAA,OAAO,CAACC,yBAAR,GAAoC,8CAClCD,OAAO,CAACE,KAD0B,EAElCC,iBAFkC,CAApC;AAKA,QAAM,2BAAYH,OAAZ,CAAN;AAEA,QAAM,oCAAN;AAEA,QAAM,yCAA0BA,OAA1B,CAAN;;AAEA,MAAII,OAAO,CAACC,GAAR,CAAYC,0CAAhB,EAA4D;AAC1D,oCAAoB,CAAE,mBAAF,CAApB;AACD;;AAED,QAAM,8BAAeN,OAAf,CAAN;;AAEA,MAAII,OAAO,CAACC,GAAR,CAAYC,0CAAhB,EAA4D;AAC1D,oCAAoB,CAAE,YAAF,EAAgB,uBAAhB,CAApB;AACD;;AAED,QAAM,iCAAkBN,OAAlB,CAAN;AAEA;AAEA,QAAM,6BAAcA,OAAd,CAAN;AAEAL,EAAAA,UAAU,CAACY,MAAX;AAEA,SAAO;AACLN,IAAAA,yBAAyB,EAAED,OAAO,CAACC,yBAD9B;AAELO,IAAAA,UAAU,EAAER,OAAO,CAACQ;AAFf,GAAP;AAID","sourcesContent":["import { startRedirectListener } from \"./redirects-writer\"\nimport {\n  IBuildContext,\n  initialize,\n  customizeSchema,\n  sourceNodes,\n  buildSchema,\n  createPages,\n  extractQueries,\n  writeOutRedirects,\n  postBootstrap,\n  rebuildSchemaWithSitePage,\n} from \"../services\"\nimport { Runner, createGraphQLRunner } from \"./create-graphql-runner\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { globalTracer } from \"opentracing\"\nimport type { GatsbyWorkerPool } from \"../utils/worker/pool\"\nimport { handleStalePageData } from \"../utils/page-data\"\nimport { saveStateForWorkers } from \"../redux\"\n\nconst tracer = globalTracer()\n\nexport async function bootstrap(\n  initialContext: Partial<IBuildContext>\n): Promise<{\n  gatsbyNodeGraphQLFunction: Runner\n  workerPool: GatsbyWorkerPool\n}> {\n  const spanArgs = initialContext.parentSpan\n    ? { childOf: initialContext.parentSpan }\n    : {}\n\n  const parentSpan = tracer.startSpan(`bootstrap`, spanArgs)\n\n  const bootstrapContext: IBuildContext & {\n    shouldRunCreatePagesStatefully: boolean\n  } = {\n    ...initialContext,\n    parentSpan,\n    shouldRunCreatePagesStatefully: true,\n  }\n\n  const context = {\n    ...bootstrapContext,\n    ...(await initialize(bootstrapContext)),\n  }\n\n  await customizeSchema(context)\n  await sourceNodes(context)\n\n  await buildSchema(context)\n\n  context.gatsbyNodeGraphQLFunction = createGraphQLRunner(\n    context.store,\n    reporter\n  )\n\n  await createPages(context)\n\n  await handleStalePageData()\n\n  await rebuildSchemaWithSitePage(context)\n\n  if (process.env.GATSBY_EXPERIMENTAL_PARALLEL_QUERY_RUNNING) {\n    saveStateForWorkers([`inferenceMetadata`])\n  }\n\n  await extractQueries(context)\n\n  if (process.env.GATSBY_EXPERIMENTAL_PARALLEL_QUERY_RUNNING) {\n    saveStateForWorkers([`components`, `staticQueryComponents`])\n  }\n\n  await writeOutRedirects(context)\n\n  startRedirectListener()\n\n  await postBootstrap(context)\n\n  parentSpan.finish()\n\n  return {\n    gatsbyNodeGraphQLFunction: context.gatsbyNodeGraphQLFunction,\n    workerPool: context.workerPool,\n  }\n}\n"],"file":"index.js"}