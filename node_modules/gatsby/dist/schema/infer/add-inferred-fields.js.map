{"version":3,"sources":["../../../src/schema/infer/add-inferred-fields.js"],"names":["_","require","ObjectTypeComposer","GraphQLList","invariant","report","getDataStore","addInferredFields","schemaComposer","typeComposer","exampleValue","typeMapping","parentSpan","config","getInferenceConfig","defaults","shouldAddFields","addInferredFieldsImpl","exampleObject","prefix","getTypeName","unsanitizedFieldPath","module","exports","fields","Object","keys","forEach","unsanitizedKey","key","createFieldName","push","fieldsByKey","groupBy","field","possibleFields","selectedField","length","resolveMultipleFields","possibleFieldsNames","map","join","warn","fieldConfig","getFieldConfig","hasField","addFields","setFieldExtension","selector","arrays","value","Array","isArray","hasMapping","getFieldConfigFromMapping","includes","getFieldConfigFromFieldNameConvention","multiple","getSimpleFieldConfig","pop","split","extensions","proxy","from","type","nodeField","find","canonicalField","sortBy","mapping","path","link","by","foreignKey","replace","linkedTypesSet","Set","linkedValues","linkedNodes","iterateNodes","node","get","has","add","internal","id","getNode","linkedTypes","typeName","sort","getOrCreateUTC","utc","setTypes","getOTC","setResolveType","dateformat","fileByRelativePath","Date","String","fieldTypeComposer","getFieldTC","lists","fieldType","getFieldType","ofType","createTypeName","create","setExtension","getExtension","derivedTypeName","inferenceConfig","Error","suffix","slice","upperFirst","NON_ALPHA_NUMERIC_EXPR","RegExp","fieldName","replaced","match","char","index","hasExtension"],"mappings":"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","sourcesContent":["const _ = require(`lodash`)\nconst { ObjectTypeComposer } = require(`graphql-compose`)\nconst { GraphQLList } = require(`graphql`)\nconst invariant = require(`invariant`)\nconst report = require(`gatsby-cli/lib/reporter`)\n\nimport { isFile } from \"./is-file\"\nimport { isDate } from \"../types/date\"\nimport { addDerivedType } from \"../types/derived-types\"\nimport { is32BitInteger } from \"../../utils/is-32-bit-integer\"\nconst { getDataStore } = require(`../../datastore`)\n\nconst addInferredFields = ({\n  schemaComposer,\n  typeComposer,\n  exampleValue,\n  typeMapping,\n  parentSpan,\n}) => {\n  const config = getInferenceConfig({\n    typeComposer,\n    defaults: {\n      shouldAddFields: true,\n    },\n  })\n  addInferredFieldsImpl({\n    schemaComposer,\n    typeComposer,\n    exampleObject: exampleValue,\n    prefix: typeComposer.getTypeName(),\n    unsanitizedFieldPath: [typeComposer.getTypeName()],\n    typeMapping,\n    config,\n  })\n}\n\nmodule.exports = {\n  addInferredFields,\n}\n\nconst addInferredFieldsImpl = ({\n  schemaComposer,\n  typeComposer,\n  exampleObject,\n  typeMapping,\n  prefix,\n  unsanitizedFieldPath,\n  config,\n}) => {\n  const fields = []\n  Object.keys(exampleObject).forEach(unsanitizedKey => {\n    const key = createFieldName(unsanitizedKey)\n    fields.push({\n      key,\n      unsanitizedKey,\n      exampleValue: exampleObject[unsanitizedKey],\n    })\n  })\n\n  const fieldsByKey = _.groupBy(fields, field => field.key)\n\n  Object.keys(fieldsByKey).forEach(key => {\n    const possibleFields = fieldsByKey[key]\n    let selectedField\n    if (possibleFields.length > 1) {\n      const field = resolveMultipleFields(possibleFields)\n      const possibleFieldsNames = possibleFields\n        .map(field => `\\`${field.unsanitizedKey}\\``)\n        .join(`, `)\n      report.warn(\n        `Multiple node fields resolve to the same GraphQL field \\`${prefix}.${field.key}\\` - [${possibleFieldsNames}]. Gatsby will use \\`${field.unsanitizedKey}\\`.`\n      )\n      selectedField = field\n    } else {\n      selectedField = possibleFields[0]\n    }\n\n    const fieldConfig = getFieldConfig({\n      ...selectedField,\n      schemaComposer,\n      typeComposer,\n      prefix,\n      unsanitizedFieldPath,\n      typeMapping,\n      config,\n    })\n\n    if (!fieldConfig) return\n\n    if (!typeComposer.hasField(key)) {\n      if (config.shouldAddFields) {\n        typeComposer.addFields({ [key]: fieldConfig })\n        typeComposer.setFieldExtension(key, `createdFrom`, `inference`)\n      }\n    }\n  })\n\n  return typeComposer\n}\n\nconst getFieldConfig = ({\n  schemaComposer,\n  typeComposer,\n  prefix,\n  exampleValue,\n  key,\n  unsanitizedKey,\n  unsanitizedFieldPath,\n  typeMapping,\n  config,\n}) => {\n  const selector = `${prefix}.${key}`\n  unsanitizedFieldPath.push(unsanitizedKey)\n\n  let arrays = 0\n  let value = exampleValue\n  while (Array.isArray(value)) {\n    value = value[0]\n    arrays++\n  }\n\n  let fieldConfig\n  if (hasMapping(typeMapping, selector)) {\n    // TODO: Use `prefix` instead of `selector` in hasMapping and getFromMapping?\n    // i.e. does the config contain sanitized field names?\n    fieldConfig = getFieldConfigFromMapping({ typeMapping, selector })\n  } else if (unsanitizedKey.includes(`___NODE`)) {\n    fieldConfig = getFieldConfigFromFieldNameConvention({\n      schemaComposer,\n      value: exampleValue,\n      key: unsanitizedKey,\n    })\n    arrays = arrays + (value.multiple ? 1 : 0)\n  } else {\n    fieldConfig = getSimpleFieldConfig({\n      schemaComposer,\n      typeComposer,\n      key,\n      value,\n      selector,\n      unsanitizedFieldPath,\n      typeMapping,\n      config,\n      arrays,\n    })\n  }\n\n  unsanitizedFieldPath.pop()\n  if (!fieldConfig) return null\n\n  // Proxy resolver to unsanitized fieldName in case it contained invalid characters\n  if (key !== unsanitizedKey.split(`___NODE`)[0]) {\n    fieldConfig = {\n      ...fieldConfig,\n      extensions: {\n        ...(fieldConfig.extensions || {}),\n        proxy: { from: unsanitizedKey },\n      },\n    }\n  }\n\n  while (arrays > 0) {\n    fieldConfig = { ...fieldConfig, type: [fieldConfig.type] }\n    arrays--\n  }\n\n  return fieldConfig\n}\n\nconst resolveMultipleFields = possibleFields => {\n  const nodeField = possibleFields.find(field =>\n    field.unsanitizedKey.includes(`___NODE`)\n  )\n  if (nodeField) {\n    return nodeField\n  }\n\n  const canonicalField = possibleFields.find(\n    field => field.unsanitizedKey === field.key\n  )\n  if (canonicalField) {\n    return canonicalField\n  }\n\n  return _.sortBy(possibleFields, field => field.unsanitizedKey)[0]\n}\n\n// XXX(freiksenet): removing this as it's a breaking change\n// Deeper nested levels should be inferred as JSON.\n// const MAX_DEPTH = 5\n\nconst hasMapping = (mapping, selector) =>\n  mapping && Object.keys(mapping).includes(selector)\n\nconst getFieldConfigFromMapping = ({ typeMapping, selector }) => {\n  const [type, ...path] = typeMapping[selector].split(`.`)\n  return {\n    type,\n    extensions: {\n      link: { by: path.join(`.`) || `id` },\n    },\n  }\n}\n\n// probably should be in example value\nconst getFieldConfigFromFieldNameConvention = ({\n  schemaComposer,\n  value,\n  key,\n}) => {\n  const path = key.split(`___NODE___`)[1]\n  // Allow linking by nested fields, e.g. `author___NODE___contact___email`\n  const foreignKey = path && path.replace(/___/g, `.`)\n  const linkedTypesSet = new Set()\n\n  if (foreignKey) {\n    // TODO: deprecate foreign keys like this (e.g. author___NODE___contact___email)\n    //  and recommend using schema customization instead\n    const linkedValues = new Set(value.linkedNodes)\n    getDataStore()\n      .iterateNodes()\n      .forEach(node => {\n        const value = _.get(node, foreignKey)\n        if (linkedValues.has(value)) {\n          linkedTypesSet.add(node.internal.type)\n        }\n      })\n  } else {\n    value.linkedNodes.forEach(id => {\n      const node = getDataStore().getNode(id)\n      if (node) {\n        linkedTypesSet.add(node.internal.type)\n      }\n    })\n  }\n\n  const linkedTypes = [...linkedTypesSet]\n\n  invariant(\n    linkedTypes.length,\n    `Encountered an error trying to infer a GraphQL type for: \\`${key}\\`. ` +\n      `There is no corresponding node with the \\`id\\` field matching: \"${value.linkedNodes}\".`\n  )\n\n  let type\n  // If the field value is an array that links to more than one type,\n  // create a GraphQLUnionType. Note that we don't support the case where\n  // scalar fields link to different types. Similarly, an array of objects\n  // with foreign-key fields will produce union types if those foreign-key\n  // fields are arrays, but not if they are scalars. See the tests for an example.\n  if (linkedTypes.length > 1) {\n    const typeName = linkedTypes.sort().join(``) + `Union`\n    type = schemaComposer.getOrCreateUTC(typeName, utc => {\n      utc.setTypes(linkedTypes.map(typeName => schemaComposer.getOTC(typeName)))\n      utc.setResolveType(node => node.internal.type)\n    })\n  } else {\n    type = linkedTypes[0]\n  }\n\n  return {\n    type,\n    extensions: {\n      link: { by: foreignKey || `id`, from: key },\n    },\n  }\n}\n\nconst getSimpleFieldConfig = ({\n  schemaComposer,\n  typeComposer,\n  key,\n  value,\n  selector,\n  unsanitizedFieldPath,\n  typeMapping,\n  config,\n  arrays,\n}) => {\n  switch (typeof value) {\n    case `boolean`:\n      return { type: `Boolean` }\n    case `number`:\n      return { type: is32BitInteger(value) ? `Int` : `Float` }\n    case `string`:\n      if (isDate(value)) {\n        return { type: `Date`, extensions: { dateformat: {} } }\n      }\n      if (isFile(unsanitizedFieldPath, value)) {\n        // NOTE: For arrays of files, where not every path references\n        // a File node in the db, it is semi-random if the field is\n        // inferred as File or String, since the exampleValue only has\n        // the first entry (which could point to an existing file or not).\n        return { type: `File`, extensions: { fileByRelativePath: {} } }\n      }\n      return { type: `String` }\n    case `object`:\n      if (value instanceof Date) {\n        return { type: `Date`, extensions: { dateformat: {} } }\n      }\n      if (value instanceof String) {\n        return { type: `String` }\n      }\n      if (value /* && depth < MAX_DEPTH*/) {\n        let fieldTypeComposer\n        if (typeComposer.hasField(key)) {\n          fieldTypeComposer = typeComposer.getFieldTC(key)\n          // If we have an object as a field value, but the field type is\n          // explicitly defined as something other than an ObjectType\n          // we can bail early.\n          if (!(fieldTypeComposer instanceof ObjectTypeComposer)) return null\n          // If the array depth of the field value and of the explicitly\n          // defined field type don't match we can also bail early.\n          let lists = 0\n          let fieldType = typeComposer.getFieldType(key)\n          while (fieldType.ofType) {\n            if (fieldType instanceof GraphQLList) lists++\n            fieldType = fieldType.ofType\n          }\n          if (lists !== arrays) return null\n        } else {\n          // When the field type has not been explicitly defined, we\n          // don't need to continue in case of @dontInfer\n          if (!config.shouldAddFields) return null\n\n          const typeName = createTypeName(selector)\n          if (schemaComposer.has(typeName)) {\n            // Type could have been already created via schema customization\n            fieldTypeComposer = schemaComposer.getOTC(typeName)\n          } else {\n            fieldTypeComposer = ObjectTypeComposer.create(\n              typeName,\n              schemaComposer\n            )\n            fieldTypeComposer.setExtension(`createdFrom`, `inference`)\n            fieldTypeComposer.setExtension(\n              `plugin`,\n              typeComposer.getExtension(`plugin`)\n            )\n            addDerivedType({\n              typeComposer,\n              derivedTypeName: fieldTypeComposer.getTypeName(),\n            })\n          }\n        }\n\n        // Inference config options are either explicitly defined on a type\n        // with directive/extension, or inherited from the parent type.\n        const inferenceConfig = getInferenceConfig({\n          typeComposer: fieldTypeComposer,\n          defaults: config,\n        })\n\n        return {\n          type: addInferredFieldsImpl({\n            schemaComposer,\n            typeComposer: fieldTypeComposer,\n            exampleObject: value,\n            typeMapping,\n            prefix: selector,\n            unsanitizedFieldPath,\n            config: inferenceConfig,\n          }),\n        }\n      }\n  }\n  throw new Error(`Can't determine type for \"${value}\" in \\`${selector}\\`.`)\n}\n\nconst createTypeName = selector => {\n  const keys = selector.split(`.`)\n  const suffix = keys.slice(1).map(_.upperFirst).join(``)\n  return `${keys[0]}${suffix}`\n}\n\nconst NON_ALPHA_NUMERIC_EXPR = new RegExp(`[^a-zA-Z0-9_]`, `g`)\n\n/**\n * GraphQL field names must be a string and cannot contain anything other than\n * alphanumeric characters and `_`. They also can't start with `__` which is\n * reserved for internal fields (`___foo` doesn't work either).\n */\nconst createFieldName = key => {\n  // Check if the key is really a string otherwise GraphQL will throw.\n  invariant(\n    typeof key === `string`,\n    `GraphQL field name (key) is not a string: \\`${key}\\`.`\n  )\n\n  const fieldName = key.split(`___NODE`)[0]\n  const replaced = fieldName.replace(NON_ALPHA_NUMERIC_EXPR, `_`)\n\n  // key is invalid; normalize with leading underscore and rest with x\n  if (replaced.match(/^__/)) {\n    return replaced.replace(/_/g, (char, index) => (index === 0 ? `_` : `x`))\n  }\n\n  // key is invalid (starts with numeric); normalize with leading underscore\n  if (replaced.match(/^[0-9]/)) {\n    return `_` + replaced\n  }\n\n  return replaced\n}\n\nconst getInferenceConfig = ({ typeComposer, defaults }) => {\n  return {\n    shouldAddFields: typeComposer.hasExtension(`infer`)\n      ? typeComposer.getExtension(`infer`)\n      : defaults.shouldAddFields,\n  }\n}\n"],"file":"add-inferred-fields.js"}