{"version":3,"sources":["../../../src/datastore/common/iterable.ts"],"names":["GatsbyIterable","constructor","source","Symbol","iterator","concat","other","concatSequence","map","fn","mapSequence","filter","predicate","filterSequence","slice","start","end","Error","sliceSequence","deduplicate","keyFn","deduplicateSequence","forEach","callback","i","value","mergeSorted","comparator","intersectSorted","deduplicateSorted","isIterable","obj","isNonArrayIterable","Array","isArray","index","item","first","second","registered","Set","current","key","has","add","defaultComparator","prev","firstSorted","secondSorted","iter1","iter2","a","next","b","done","return","eq"],"mappings":"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","sourcesContent":["/**\n * Wrapper for any iterable providing chainable interface and convenience methods\n * similar to array.\n *\n * Additionally provides convenience methods for sorted iterables.\n *\n * Note: avoiding async iterables because of perf reasons, see https://github.com/nodejs/node/issues/31979\n * (fortunately lmdb can traverse stuff in sync manner very fast)\n */\nexport class GatsbyIterable<T> {\n  constructor(private source: Iterable<T> | (() => Iterable<T>)) {}\n\n  [Symbol.iterator](): Iterator<T> {\n    const source =\n      typeof this.source === `function` ? this.source() : this.source\n    return source[Symbol.iterator]()\n  }\n\n  concat<U>(other: Iterable<U>): GatsbyIterable<T | U> {\n    return new GatsbyIterable(() => concatSequence(this, other))\n  }\n\n  map<U>(fn: (entry: T, index: number) => U): GatsbyIterable<U> {\n    return new GatsbyIterable(() => mapSequence(this, fn))\n  }\n\n  filter(predicate: (entry: T) => unknown): GatsbyIterable<T> {\n    return new GatsbyIterable(() => filterSequence(this, predicate))\n  }\n\n  slice(start: number, end?: number): GatsbyIterable<T> {\n    if ((typeof end !== `undefined` && end < start) || start < 0)\n      throw new Error(\n        `Both arguments must not be negative and end must be greater than start`\n      )\n    return new GatsbyIterable<T>(() => sliceSequence(this, start, end))\n  }\n\n  deduplicate(keyFn?: (entry: T) => unknown): GatsbyIterable<T> {\n    return new GatsbyIterable<T>(() => deduplicateSequence(this, keyFn))\n  }\n\n  forEach(callback: (entry: T, index: number) => unknown): void {\n    let i = 0\n    for (const value of this) {\n      callback(value, i++)\n    }\n  }\n\n  /**\n   * Assuming both this and the other iterable are sorted\n   * produces the new sorted iterable with interleaved values.\n   *\n   * Note: this method is not removing duplicates\n   */\n  mergeSorted<U = T>(\n    other: Iterable<U>,\n    comparator?: (a: T | U, b: T | U) => number\n  ): GatsbyIterable<T | U> {\n    return new GatsbyIterable(() => mergeSorted(this, other, comparator))\n  }\n\n  /**\n   * Assuming both this and the other iterable are sorted\n   * produces the new sorted iterable with values from this iterable\n   * that also exist in the other iterable.\n   */\n  intersectSorted<U = T>(\n    other: Iterable<U>,\n    comparator?: (a: T | U, b: T | U) => number\n  ): GatsbyIterable<T | U> {\n    return new GatsbyIterable(() => intersectSorted(this, other, comparator))\n  }\n\n  /**\n   * Assuming this iterable is sorted, removes duplicates from it\n   * by applying comparator(prev, current) to sibling iterable values.\n   *\n   * Comparator function is expected to return 0 when items are equal,\n   * similar to Array.prototype.sort() argument.\n   *\n   * If comparator is not set, uses strict === comparison\n   */\n  deduplicateSorted(comparator?: (a: T, b: T) => number): GatsbyIterable<T> {\n    return new GatsbyIterable<T>(() => deduplicateSorted(this, comparator))\n  }\n}\n\n/**\n * Returns true when passed value is iterable\n */\nexport function isIterable(obj: unknown): obj is Iterable<any> {\n  if (typeof obj !== `object` || obj === null) {\n    return false\n  }\n  return typeof obj[Symbol.iterator] === `function`\n}\n\nexport function isNonArrayIterable<T>(value: unknown): value is Iterable<T> {\n  return isIterable(value) && !Array.isArray(value)\n}\n\nfunction* mapSequence<T, U>(\n  source: Iterable<T>,\n  fn: (arg: T, index: number) => U\n): Generator<U> {\n  let i = 0\n  for (const value of source) {\n    yield fn(value, i++)\n  }\n}\n\nfunction* sliceSequence<T>(\n  source: Iterable<T>,\n  start: number,\n  end: number | undefined\n): Generator<T> {\n  let index = -1\n  for (const item of source) {\n    index++\n    if (index < start) continue\n    if (typeof end !== `undefined` && index >= end) break\n    yield item\n  }\n}\n\nfunction* filterSequence<T>(\n  source: Iterable<T>,\n  predicate: (arg: T) => unknown\n): Generator<T> {\n  for (const value of source) {\n    if (predicate(value)) {\n      yield value\n    }\n  }\n}\n\nfunction* concatSequence<T, U>(\n  first: Iterable<T>,\n  second: Iterable<U>\n): Generator<U | T> {\n  for (const value of first) {\n    yield value\n  }\n  for (const value of second) {\n    yield value\n  }\n}\n\nfunction* deduplicateSequence<T>(\n  source: Iterable<T>,\n  keyFn?: (entry: T) => unknown\n): Generator<T> {\n  // TODO: this can be potentially improved by using bloom filters?\n  const registered = new Set<unknown>()\n\n  for (const current of source) {\n    const key = keyFn ? keyFn(current) : current\n    if (!registered.has(key)) {\n      registered.add(key)\n      yield current\n    }\n  }\n}\n\nfunction* deduplicateSorted<T>(\n  source: Iterable<T>,\n  comparator: (a: T, b: T) => number = defaultComparator\n): Generator<T> {\n  let prev\n  for (const current of source) {\n    if (typeof prev === `undefined` || comparator(prev, current) !== 0) {\n      yield current\n    }\n    prev = current\n  }\n}\n\n// Merge two originally sorted iterables:\nfunction* mergeSorted<T, U = T>(\n  firstSorted: Iterable<T>,\n  secondSorted: Iterable<U>,\n  comparator: (a: T | U, b: T | U) => number = defaultComparator\n): Generator<T | U> {\n  const iter1 = firstSorted[Symbol.iterator]()\n  const iter2 = secondSorted[Symbol.iterator]()\n  try {\n    let a = iter1.next()\n    let b = iter2.next()\n    while (!a.done && !b.done) {\n      if (comparator(a.value, b.value) <= 0) {\n        yield a.value\n        a = iter1.next()\n      } else {\n        yield b.value\n        b = iter2.next()\n      }\n    }\n    while (!a.done) {\n      yield a.value\n      a = iter1.next()\n    }\n    while (!b.done) {\n      yield b.value\n      b = iter2.next()\n    }\n  } finally {\n    // If generator is exited early, make sure to close iterators too\n    // See https://raganwald.com/2017/07/22/closing-iterables-is-a-leaky-abstraction.html#more-about-closing-iterators-explicitly\n    if (typeof iter1.return === `function`) iter1.return()\n    if (typeof iter2.return === `function`) iter2.return()\n  }\n}\n\nfunction* intersectSorted<T, U = T>(\n  firstSorted: Iterable<T>,\n  secondSorted: Iterable<U>,\n  comparator: (a: T | U, b: T | U) => number = defaultComparator\n): Generator<T> {\n  const iter1 = firstSorted[Symbol.iterator]()\n  const iter2 = secondSorted[Symbol.iterator]()\n  try {\n    let a = iter1.next()\n    let b = iter2.next()\n\n    while (!a.done && !b.done) {\n      const eq = comparator(a.value, b.value)\n\n      if (eq < 0) {\n        // a < b\n        a = iter1.next()\n      } else if (eq > 0) {\n        // a > b\n        b = iter2.next()\n      } else {\n        yield a.value\n        a = iter1.next()\n      }\n    }\n  } finally {\n    if (typeof iter1.return === `function`) iter1.return()\n    if (typeof iter2.return === `function`) iter2.return()\n  }\n}\n\nfunction defaultComparator<T, U = T>(a: T | U, b: T | U): number {\n  if (a === b) {\n    return 0\n  }\n  return a > b ? 1 : -1\n}\n"],"file":"iterable.js"}