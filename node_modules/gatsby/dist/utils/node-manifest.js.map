{"version":3,"sources":["../../src/utils/node-manifest.ts"],"names":["findPageOwnedByNodeId","nodeId","state","store","getState","pages","nodes","byNode","queries","usingPagesMap","process","env","NODE_ENV","pagePathSetOrMap","get","pagePath","values","next","value","foundPageBy","size","ownerPagePath","foundOwnerNodeId","pathOrPageObject","path","fullPage","ownerNodeId","foundPageIdInContext","context","id","pageCreatedByPluginName","pluginCreatorId","name","pageCreatedByFilesystemPlugin","page","foundPageByToLogIds","none","queryTracking","warnAboutNodeManifestMappingProblems","inputManifest","logId","reporter","error","Error","processNodeManifest","node","fullNode","warn","pluginName","nodeManifestPage","finalManifest","gatsbySiteDirectory","program","directory","manifestFilePath","join","manifestId","manifestFileDir","dirname","fs","ensureDir","writeJSON","processNodeManifests","nodeManifests","totalManifests","length","processedManifests","Promise","all","map","manifest","totalProcessedManifests","totalFailedManifests","forEach","pluralize","info","dispatch","internalActions","deleteNodeManifests"],"mappings":"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","sourcesContent":["import { ErrorId } from \"./../../../gatsby-cli/src/structured-errors/error-map\"\nimport { getNode } from \"./../datastore\"\nimport { IGatsbyPage, INodeManifest } from \"./../redux/types\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { store } from \"../redux/\"\nimport { internalActions } from \"../redux/actions\"\nimport path from \"path\"\nimport fs from \"fs-extra\"\n\ninterface INodeManifestPage {\n  path?: string\n}\n\n/**\n * This it the output after processing calls to the public unstable_createNodeManifest action\n */\ninterface INodeManifestOut {\n  page: INodeManifestPage\n  node: {\n    id: string\n  }\n  foundPageBy: FoundPageBy\n}\n\ntype FoundPageBy =\n  | `ownerNodeId`\n  | `filesystem-route-api`\n  // for these three we warn to use ownerNodeId instead\n  | `context.id`\n  | `queryTracking`\n  | `none`\n\n/**\n * Finds a final built page by nodeId\n *\n * Note that this function wont work properly in `gatsby develop`\n * since develop no longer runs all page queries when creating pages.\n * We use the node id to query mapping to find the right page but\n * this mapping only exists once you've visited a page in your browser.\n * When this fn is being used for routing to previews the user wont necessarily have\n * visited the page in the browser yet.\n */\nasync function findPageOwnedByNodeId({\n  nodeId,\n}: {\n  nodeId: string\n}): Promise<{\n  page: INodeManifestPage\n  foundPageBy: FoundPageBy\n}> {\n  const state = store.getState()\n  const { pages, nodes } = state\n  const { byNode } = state.queries\n\n  // in development queries are run on demand so we wont have an accurate nodeId->pages map until those pages are visited in the browser. We want this mapping before the page is visited in the browser so we can route to the right page in the browser.\n  // So in development we can just use the Map of all pages (pagePath -> pageNode)\n  // but for builds (preview inc builds or regular builds) we will have a full map\n  // of all nodeId's to pages they're queried on and we can use that instead since it\n  // will be a much smaller list of pages, resulting in better performance for large sites\n  const usingPagesMap: boolean = `development` === process.env.NODE_ENV\n\n  const pagePathSetOrMap = usingPagesMap\n    ? // this is a Map of page path to page node\n      pages\n    : // this is a Set of page paths\n      byNode?.get(nodeId)\n\n  // the default page path is the first page found in\n  // node id to page query tracking\n  let pagePath = byNode?.get(nodeId)?.values()?.next()?.value\n\n  let foundPageBy: FoundPageBy = pagePath ? `queryTracking` : `none`\n\n  // but if we have more than one page where this node shows up\n  // we need to try to be more specific\n  if (pagePathSetOrMap && pagePathSetOrMap.size > 1) {\n    let ownerPagePath: string | undefined\n    let foundOwnerNodeId = false\n\n    // for each page this nodeId is queried in\n    for (const pathOrPageObject of pagePathSetOrMap.values()) {\n      // if we haven't found a page with this nodeId\n      // set as page.ownerNodeId then run this logic.\n      // this condition is on foundOwnerNodeId instead of ownerPagePath\n      // in case we find a page with the nodeId in page.context.id\n      // and then later in the loop there's a page with this nodeId\n      // set on page.ownerNodeId.\n      // We always want to prefer ownerPagePath over context.id\n      if (foundOwnerNodeId) {\n        break\n      }\n\n      const path = (usingPagesMap\n        ? // in development we're using a Map, so the value here is a page object\n          (pathOrPageObject as IGatsbyPage).path\n        : // in builds we're using a Set so the page path is the value\n          pathOrPageObject) as string\n\n      const fullPage: IGatsbyPage | undefined = pages.get(path)\n\n      foundOwnerNodeId = fullPage?.ownerNodeId === nodeId\n\n      const foundPageIdInContext = fullPage?.context.id === nodeId\n\n      if (foundOwnerNodeId) {\n        foundPageBy = `ownerNodeId`\n      } else if (foundPageIdInContext && fullPage) {\n        const pageCreatedByPluginName = nodes.get(fullPage.pluginCreatorId)\n          ?.name\n\n        const pageCreatedByFilesystemPlugin =\n          pageCreatedByPluginName === `gatsby-plugin-page-creator`\n\n        foundPageBy = pageCreatedByFilesystemPlugin\n          ? `filesystem-route-api`\n          : `context.id`\n      }\n\n      if (\n        fullPage &&\n        // first check for the ownerNodeId on the page. this is\n        // the defacto owner. Can't get more specific than this\n        (foundOwnerNodeId ||\n          // if there's no specified owner look to see if\n          // pageContext has an `id` variable which matches our\n          // nodeId. Using an \"id\" as a variable in queries is common\n          // and if we don't have an owner this is a better guess\n          // of an owner than grabbing the first page query we find\n          // that's mapped to this node id.\n          // this also makes this work with the filesystem Route API without\n          // changing that API.\n          foundPageIdInContext)\n      ) {\n        // save this path to use in our manifest!\n        ownerPagePath = fullPage.path\n      }\n    }\n\n    if (ownerPagePath) {\n      pagePath = ownerPagePath\n    }\n  }\n\n  return {\n    page: {\n      path: pagePath || null,\n    },\n    foundPageBy,\n  }\n}\n\n// these id's correspond to error id's in\n// packages/gatsby-cli/src/structured-errors/error-map.ts\nexport const foundPageByToLogIds = {\n  none: `11801`,\n  [`context.id`]: `11802`,\n  queryTracking: `11803`,\n  [`filesystem-route-api`]: `success`,\n  ownerNodeId: `success`,\n}\n\n/**\n * Takes in some info about a node manifest and the page we did or didn't find for it, then warns and returns the warning string\n */\nexport function warnAboutNodeManifestMappingProblems({\n  inputManifest,\n  pagePath,\n  foundPageBy,\n}: {\n  inputManifest: INodeManifest\n  pagePath?: string\n  foundPageBy: FoundPageBy\n}): { logId: string } {\n  let logId: ErrorId | `success`\n\n  switch (foundPageBy) {\n    case `none`:\n    case `context.id`:\n    case `queryTracking`: {\n      logId = foundPageByToLogIds[foundPageBy]\n      reporter.error({\n        id: logId,\n        context: {\n          inputManifest,\n          pagePath,\n        },\n      })\n      break\n    }\n\n    case `filesystem-route-api`:\n    case `ownerNodeId`:\n      logId = `success`\n      break\n\n    default: {\n      throw Error(`Node Manifest mapping is in an impossible state`)\n    }\n  }\n\n  return {\n    logId,\n  }\n}\n\n/**\n * Prepares and then writes out an individual node manifest file to be used for routing to previews. Manifest files are added via the public unstable_createNodeManifest action\n */\nexport async function processNodeManifest(\n  inputManifest: INodeManifest\n): Promise<null | INodeManifestOut> {\n  const nodeId = inputManifest.node.id\n  const fullNode = getNode(nodeId)\n\n  if (!fullNode) {\n    reporter.warn(\n      `Plugin ${inputManifest.pluginName} called unstable_createNodeManifest for a node which doesn't exist with an id of ${nodeId}.`\n    )\n    return null\n  }\n\n  // map the node to a page that was created\n  const { page: nodeManifestPage, foundPageBy } = await findPageOwnedByNodeId({\n    nodeId,\n  })\n\n  warnAboutNodeManifestMappingProblems({\n    inputManifest,\n    pagePath: nodeManifestPage.path,\n    foundPageBy,\n  })\n\n  const finalManifest: INodeManifestOut = {\n    node: inputManifest.node,\n    page: nodeManifestPage,\n    foundPageBy,\n  }\n\n  const gatsbySiteDirectory = store.getState().program.directory\n\n  // write out the manifest file\n  const manifestFilePath = path.join(\n    gatsbySiteDirectory,\n    `.cache`,\n    `node-manifests`,\n    inputManifest.pluginName,\n    `${inputManifest.manifestId}.json`\n  )\n\n  const manifestFileDir = path.dirname(manifestFilePath)\n\n  await fs.ensureDir(manifestFileDir)\n  await fs.writeJSON(manifestFilePath, finalManifest)\n\n  return finalManifest\n}\n\n/**\n * Grabs all pending node manifests, processes them, writes them to disk,\n * and then removes them from the store.\n * Manifest files are added via the public unstable_createNodeManifest action in sourceNodes\n */\nexport async function processNodeManifests(): Promise<void> {\n  const { nodeManifests } = store.getState()\n\n  const totalManifests = nodeManifests.length\n\n  if (totalManifests === 0) {\n    return\n  }\n\n  const processedManifests = await Promise.all(\n    nodeManifests.map(manifest => processNodeManifest(manifest))\n  )\n\n  let totalProcessedManifests = 0\n  let totalFailedManifests = 0\n\n  processedManifests.forEach(manifest => {\n    if (manifest) {\n      totalProcessedManifests++\n    } else {\n      totalFailedManifests++\n    }\n  })\n\n  const pluralize = (length: number): string =>\n    length > 1 || length === 0 ? `s` : ``\n\n  reporter.info(\n    `Wrote out ${totalProcessedManifests} node page manifest file${pluralize(\n      totalProcessedManifests\n    )}${\n      totalFailedManifests > 0\n        ? `. ${totalFailedManifests} manifest${pluralize(\n            totalFailedManifests\n          )} couldn't be processed.`\n        : ``\n    }`\n  )\n\n  // clean up all pending manifests from the store\n  store.dispatch(internalActions.deleteNodeManifests())\n}\n"],"file":"node-manifest.js"}