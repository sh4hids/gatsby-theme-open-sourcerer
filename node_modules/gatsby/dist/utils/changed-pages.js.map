{"version":3,"sources":["../../src/utils/changed-pages.ts"],"names":["deletePage","actions","deleteUntouchedPages","currentPages","timeBeforeApisRan","shouldRunCreatePagesStatefully","deletedPages","forEach","page","isCreatedByStatefulCreatePages","updatedAt","path","store","dispatch","push","findChangedPages","oldPages","changedPages","compareWithoutUpdated","_left","_right","key","undefined","newPage","oldPage","get","_page","has"],"mappings":";;;;;;AAAA;;AACA;;AAGA;;AAFA,MAAM;AAAEA,EAAAA;AAAF,IAAiBC,gBAAvB;;AAKO,SAASC,oBAAT,CACLC,YADK,EAELC,iBAFK,EAGLC,8BAHK,EAIU;AACf,QAAMC,YAA2B,GAAG,EAApC,CADe,CAGf;;AACAH,EAAAA,YAAY,CAACI,OAAb,CAAqBC,IAAI,IAAI;AAC3B,QACE,CAACH,8BAA8B,IAC7B,CAACG,IAAI,CAACC,8BADR,KAEAD,IAAI,CAACE,SAAL,GAAiBN,iBAFjB,IAGAI,IAAI,CAACG,IAAL,KAAe,WAJjB,EAKE;AACAC,mBAAMC,QAAN,CAAeb,UAAU,CAACQ,IAAD,CAAzB;;AACAF,MAAAA,YAAY,CAACQ,IAAb,CAAkBN,IAAI,CAACG,IAAvB,EAA8B,aAAYH,IAAI,CAACG,IAAK,EAApD;AACD;AACF,GAVD;AAWA,SAAOL,YAAP;AACD;;AAEM,SAASS,gBAAT,CACLC,QADK,EAELb,YAFK,EAML;AACA,QAAMc,YAA2B,GAAG,EAApC;;AAEA,QAAMC,qBAAwC,GAAG,CAACC,KAAD,EAAQC,MAAR,EAAgBC,GAAhB,KAC/CA,GAAG,KAAM,WAAT,IAAuBC,SADzB;;AAGAnB,EAAAA,YAAY,CAACI,OAAb,CAAqB,CAACgB,OAAD,EAAUZ,IAAV,KAAmB;AACtC,UAAMa,OAAO,GAAGR,QAAQ,CAACS,GAAT,CAAad,IAAb,CAAhB;;AACA,QAAI,CAACa,OAAD,IAAY,CAAC,yBAAYD,OAAZ,EAAqBC,OAArB,EAA8BN,qBAA9B,CAAjB,EAAuE;AACrED,MAAAA,YAAY,CAACH,IAAb,CAAkBH,IAAlB;AACD;AACF,GALD;AAMA,QAAML,YAA2B,GAAG,EAApC;AACAU,EAAAA,QAAQ,CAACT,OAAT,CAAiB,CAACmB,KAAD,EAAQL,GAAR,KAAgB;AAC/B,QAAI,CAAClB,YAAY,CAACwB,GAAb,CAAiBN,GAAjB,CAAL,EAA4B;AAC1Bf,MAAAA,YAAY,CAACQ,IAAb,CAAkBO,GAAlB;AACD;AACF,GAJD;AAMA,SAAO;AAAEJ,IAAAA,YAAF;AAAgBX,IAAAA;AAAhB,GAAP;AACD","sourcesContent":["import { actions } from \"../redux/actions\"\nimport { store } from \"../redux\"\nconst { deletePage } = actions\n\nimport { isEqualWith, IsEqualCustomizer } from \"lodash\"\nimport { IGatsbyPage } from \"../redux/types\"\n\nexport function deleteUntouchedPages(\n  currentPages: Map<string, IGatsbyPage>,\n  timeBeforeApisRan: number,\n  shouldRunCreatePagesStatefully: boolean\n): Array<string> {\n  const deletedPages: Array<string> = []\n\n  // Delete pages that weren't updated when running createPages.\n  currentPages.forEach(page => {\n    if (\n      (shouldRunCreatePagesStatefully ||\n        !page.isCreatedByStatefulCreatePages) &&\n      page.updatedAt < timeBeforeApisRan &&\n      page.path !== `/404.html`\n    ) {\n      store.dispatch(deletePage(page))\n      deletedPages.push(page.path, `/page-data${page.path}`)\n    }\n  })\n  return deletedPages\n}\n\nexport function findChangedPages(\n  oldPages: Map<string, IGatsbyPage>,\n  currentPages: Map<string, IGatsbyPage>\n): {\n  changedPages: Array<string>\n  deletedPages: Array<string>\n} {\n  const changedPages: Array<string> = []\n\n  const compareWithoutUpdated: IsEqualCustomizer = (_left, _right, key) =>\n    key === `updatedAt` || undefined\n\n  currentPages.forEach((newPage, path) => {\n    const oldPage = oldPages.get(path)\n    if (!oldPage || !isEqualWith(newPage, oldPage, compareWithoutUpdated)) {\n      changedPages.push(path)\n    }\n  })\n  const deletedPages: Array<string> = []\n  oldPages.forEach((_page, key) => {\n    if (!currentPages.has(key)) {\n      deletedPages.push(key)\n    }\n  })\n\n  return { changedPages, deletedPages }\n}\n"],"file":"changed-pages.js"}