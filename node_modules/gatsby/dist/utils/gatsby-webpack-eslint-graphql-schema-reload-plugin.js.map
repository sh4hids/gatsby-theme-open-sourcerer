{"version":3,"sources":["../../src/utils/gatsby-webpack-eslint-graphql-schema-reload-plugin.ts"],"names":["GatsbyWebpackEslintGraphqlSchemaReload","constructor","plugin","name","schema","findEslintOptions","compiler","options","plugins","find","item","ESLintPlugin","undefined","apply","hooks","compile","tap","program","store","getState","directory","Object","assign"],"mappings":";;;;;;;AAMA;;AACA;;AACA;;AAGA;;AACA;;AAZA;AACA;AACA;AACA;AACA;AACA;AAQO,MAAMA,sCAAN,CAA6C;AAIlDC,EAAAA,WAAW,GAAG;AACZ,SAAKC,MAAL,GAAc;AAAEC,MAAAA,IAAI,EAAG;AAAT,KAAd;AACA,SAAKC,MAAL,GAAc,IAAd;AACD;;AAEDC,EAAAA,iBAAiB,CAACC,QAAD,EAAsC;AACrD,UAAMJ,MAAM,GAAGI,QAAQ,CAACC,OAAT,CAAiBC,OAAjB,CAAyBC,IAAzB,CACbC,IAAI,IAAIA,IAAI,YAAYC,4BADX,CAAf;AAGA,WAAO,OAAOT,MAAP,KAAmB,QAAnB,GAA6BA,MAA7B,aAA6BA,MAA7B,uBAA6BA,MAAM,CAAEK,OAArC,GAA+CK,SAAtD;AACD;;AAEDC,EAAAA,KAAK,CAACP,QAAD,EAA2B;AAC9BA,IAAAA,QAAQ,CAACQ,KAAT,CAAeC,OAAf,CAAuBC,GAAvB,CAA2B,KAAKd,MAAL,CAAYC,IAAvC,EAA6C,MAAM;AACjD,YAAM;AAAEC,QAAAA,MAAF;AAAUa,QAAAA;AAAV,UAAsBC,aAAMC,QAAN,EAA5B;;AAEA,UAAI,CAAC,KAAKf,MAAV,EAAkB;AAChB;AACA,aAAKA,MAAL,GAAcA,MAAd;AACA;AACD;;AAED,UAAI,KAAKA,MAAL,KAAgBA,MAAhB,IAA0B,6CAAea,OAAO,CAACG,SAAvB,CAA9B,EAAiE;AAC/D;AACD;;AACD,WAAKhB,MAAL,GAAcA,MAAd,CAZiD,CAcjD;;AACA,YAAMG,OAAO,GAAG,KAAKF,iBAAL,CAAuBC,QAAvB,CAAhB;;AAEA,UAAI,CAACC,OAAL,EAAc;AACZ;AACD,OAnBgD,CAqBjD;AACA;;;AACAc,MAAAA,MAAM,CAACC,MAAP,CAAcf,OAAd,EAAuB,gCAAaH,MAAb,EAAqB,uCAArB,CAAvB;AACD,KAxBD;AAyBD;;AA1CiD","sourcesContent":["/**\n * The problem: after GraphQL schema rebuilds, eslint loader keeps validating against\n * the old schema.\n *\n * This plugin replaces options of eslint-plugin-graphql during develop\n */\nimport { store } from \"../redux\"\nimport { eslintConfig } from \"./eslint-config\"\nimport { hasLocalEslint } from \"./local-eslint-config-finder\"\nimport { Compiler } from \"webpack\"\nimport { GraphQLSchema } from \"graphql\"\nimport { reactHasJsxRuntime } from \"./webpack-utils\"\nimport ESLintPlugin from \"eslint-webpack-plugin\"\nexport class GatsbyWebpackEslintGraphqlSchemaReload {\n  private plugin: { name: string }\n  private schema: GraphQLSchema | null\n\n  constructor() {\n    this.plugin = { name: `GatsbyWebpackEslintGraphqlSchemaReload` }\n    this.schema = null\n  }\n\n  findEslintOptions(compiler: Compiler): any | undefined {\n    const plugin = compiler.options.plugins.find(\n      item => item instanceof ESLintPlugin\n    )\n    return typeof plugin === `object` ? plugin?.options : undefined\n  }\n\n  apply(compiler: Compiler): void {\n    compiler.hooks.compile.tap(this.plugin.name, () => {\n      const { schema, program } = store.getState()\n\n      if (!this.schema) {\n        // initial build\n        this.schema = schema\n        return\n      }\n\n      if (this.schema === schema || hasLocalEslint(program.directory)) {\n        return\n      }\n      this.schema = schema\n\n      // Original eslint config object from webpack rules\n      const options = this.findEslintOptions(compiler)\n\n      if (!options) {\n        return\n      }\n\n      // Hackish but works:\n      // replacing original eslint options object with updated config\n      Object.assign(options, eslintConfig(schema, reactHasJsxRuntime()))\n    })\n  }\n}\n"],"file":"gatsby-webpack-eslint-graphql-schema-reload-plugin.js"}