{"version":3,"sources":["../../../../src/utils/worker/child/schema.ts"],"names":["setInferenceMetadata","buildSchema","workerStore","store","getState","config","plugins","Error","fullMetadataBuild","parentSpan"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEO,SAASA,oBAAT,GAAsC;AAC3C,uBAAS,CAAE,mBAAF,CAAT;AACD;;AAEM,eAAeC,WAAf,GAA4C;AAAA;;AACjD,QAAMC,WAAW,GAAGC,aAAMC,QAAN,EAApB;;AAEA,MAAI,EAACF,WAAD,aAACA,WAAD,sCAACA,WAAW,CAAEG,MAAd,gDAAC,oBAAqBC,OAAtB,CAAJ,EAAmC;AACjC,UAAMC,KAAK,CACR,0EADQ,CAAX;AAGD;;AAEDP,EAAAA,oBAAoB;AAEpB,QAAM,4BAAe,2BAAf,CAAN;AAEA,QAAM,mBAAM;AAAEQ,IAAAA,iBAAiB,EAAE,KAArB;AAA4BC,IAAAA,UAAU,EAAE;AAAxC,GAAN,CAAN;AACD","sourcesContent":["import { store } from \"../../../redux\"\nimport { build } from \"../../../schema\"\nimport apiRunnerNode from \"../../api-runner-node\"\nimport { setState } from \"./state\"\n\nexport function setInferenceMetadata(): void {\n  setState([`inferenceMetadata`])\n}\n\nexport async function buildSchema(): Promise<void> {\n  const workerStore = store.getState()\n\n  if (!workerStore?.config?.plugins) {\n    throw Error(\n      `Config loading didn't finish before attempting to build schema in worker`\n    )\n  }\n\n  setInferenceMetadata()\n\n  await apiRunnerNode(`createSchemaCustomization`)\n\n  await build({ fullMetadataBuild: false, parentSpan: {} })\n}\n"],"file":"schema.js"}