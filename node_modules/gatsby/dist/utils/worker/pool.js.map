{"version":3,"sources":["../../../src/utils/worker/pool.ts"],"names":["create","worker","WorkerPool","require","resolve","numWorkers","Math","max","env","GATSBY_WORKER_POOL_WORKER","runQueriesInWorkersQueue","pool","queryIds","chunkSize","staticQuerySegments","staticQueryIds","pageQuerySegments","pageQueryIds","activity","reporter","createProgress","length","start","promises","segment","push","single","runQueries","then","tick","Promise","all","end"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAMO,MAAMA,MAAM,GAAG,MAAwB;AAC5C,QAAMC,MAAM,GAAG,IAAIC,wBAAJ,CACbC,OAAO,CAACC,OAAR,CAAiB,SAAjB,CADa,EAEb;AACEC,IAAAA,UAAU,EAAEC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,uCAAiB,CAA7B,CADd;AAEEC,IAAAA,GAAG,EAAE;AACHC,MAAAA,yBAAyB,EAAG;AADzB;AAFP,GAFa,CAAf;AAUA,SAAOR,MAAP;AACD,CAZM;;;;AAcA,eAAeS,wBAAf,CACLC,IADK,EAELC,QAFK,EAGLC,SAAS,GAAG,EAHP,EAIU;AACf,QAAMC,mBAAmB,GAAG,mBAAMF,QAAQ,CAACG,cAAf,EAA+BF,SAA/B,CAA5B;AACA,QAAMG,iBAAiB,GAAG,mBAAMJ,QAAQ,CAACK,YAAf,EAA6BJ,SAA7B,CAA1B;;AAEA,QAAMK,QAAQ,GAAGC,kBAASC,cAAT,CACd,wBADc,EAEfR,QAAQ,CAACG,cAAT,CAAwBM,MAAxB,GAAiCT,QAAQ,CAACK,YAAT,CAAsBI,MAFxC,CAAjB;;AAIAH,EAAAA,QAAQ,CAACI,KAAT;AAEA,QAAMC,QAA8B,GAAG,EAAvC;;AAEA,OAAK,MAAMC,OAAX,IAAsBV,mBAAtB,EAA2C;AACzCS,IAAAA,QAAQ,CAACE,IAAT,CACEd,IAAI,CAACe,MAAL,CACGC,UADH,CACc;AAAEV,MAAAA,YAAY,EAAE,EAAhB;AAAoBF,MAAAA,cAAc,EAAES;AAApC,KADd,EAEGI,IAFH,CAEQ,MAAM;AACVV,MAAAA,QAAQ,CAACW,IAAT,CAAcL,OAAO,CAACH,MAAtB;AACD,KAJH,CADF;AAOD;;AAED,OAAK,MAAMG,OAAX,IAAsBR,iBAAtB,EAAyC;AACvCO,IAAAA,QAAQ,CAACE,IAAT,CACEd,IAAI,CAACe,MAAL,CACGC,UADH,CACc;AAAEV,MAAAA,YAAY,EAAEO,OAAhB;AAAyBT,MAAAA,cAAc,EAAE;AAAzC,KADd,EAEGa,IAFH,CAEQ,MAAM;AACVV,MAAAA,QAAQ,CAACW,IAAT,CAAcL,OAAO,CAACH,MAAtB;AACD,KAJH,CADF;AAOD;;AAED,QAAMS,OAAO,CAACC,GAAR,CAAYR,QAAZ,CAAN;AAEAL,EAAAA,QAAQ,CAACc,GAAT;AACD","sourcesContent":["import { WorkerPool } from \"gatsby-worker\"\nimport { chunk } from \"lodash\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { cpuCoreCount } from \"gatsby-core-utils\"\n\nimport { IGroupedQueryIds } from \"../../services\"\n\nexport type GatsbyWorkerPool = WorkerPool<typeof import(\"./child\")>\n\nexport const create = (): GatsbyWorkerPool => {\n  const worker = new WorkerPool<typeof import(\"./child\")>(\n    require.resolve(`./child`),\n    {\n      numWorkers: Math.max(1, cpuCoreCount() - 1),\n      env: {\n        GATSBY_WORKER_POOL_WORKER: `true`,\n      },\n    }\n  )\n\n  return worker\n}\n\nexport async function runQueriesInWorkersQueue(\n  pool: GatsbyWorkerPool,\n  queryIds: IGroupedQueryIds,\n  chunkSize = 50\n): Promise<void> {\n  const staticQuerySegments = chunk(queryIds.staticQueryIds, chunkSize)\n  const pageQuerySegments = chunk(queryIds.pageQueryIds, chunkSize)\n\n  const activity = reporter.createProgress(\n    `run queries in workers`,\n    queryIds.staticQueryIds.length + queryIds.pageQueryIds.length\n  )\n  activity.start()\n\n  const promises: Array<Promise<void>> = []\n\n  for (const segment of staticQuerySegments) {\n    promises.push(\n      pool.single\n        .runQueries({ pageQueryIds: [], staticQueryIds: segment })\n        .then(() => {\n          activity.tick(segment.length)\n        })\n    )\n  }\n\n  for (const segment of pageQuerySegments) {\n    promises.push(\n      pool.single\n        .runQueries({ pageQueryIds: segment, staticQueryIds: [] })\n        .then(() => {\n          activity.tick(segment.length)\n        })\n    )\n  }\n\n  await Promise.all(promises)\n\n  activity.end()\n}\n"],"file":"pool.js"}